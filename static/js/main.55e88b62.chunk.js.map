{"version":3,"sources":["images/ElevatorScene1.png","images/ElevatorScene2.png","images/ElevatorScene3.png","images/ElevatorScene4.png","components/ElevatorButton.js","containers/ElevatorCallButton.js","components/CounterWeight.js","components/FloorNumber.js","containers/ElevatorBayHeader.js","containers/ElevatorBay.js","containers/Floor.js","containers/Elevator.js","containers/ElevatorShaft.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ElevatorButton","props","handleClick","bind","this","title","className","isActive","onClick","React","Component","ElevatorCallButton","CounterWeight","FloorNumber","floor","ElevatorBayHeader","floors","map","key","currentFloor","ElevatorBay","elevator","Floor","style","id","requestQueue","includes","Elevator","document","getElementById","scrollIntoView","behavior","button","ElevatorShaft","state","direction","legend","1","backgroundImage","ElevatorScene1","backgroundColor","2","ElevatorScene2","3","ElevatorScene3","4","ElevatorScene4","insertNewRequest","moveFloors","startClock","newQueue","push","unshift","setState","newFloor","filter","length","setInterval","self","elevatorDoors","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.55e88b62.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ElevatorScene1.c060c398.png\";","module.exports = __webpack_public_path__ + \"static/media/ElevatorScene2.d27e56a6.png\";","module.exports = __webpack_public_path__ + \"static/media/ElevatorScene3.0b1aca68.png\";","module.exports = __webpack_public_path__ + \"static/media/ElevatorScene4.5073e4d6.png\";","import React from 'react';\n\nexport class ElevatorButton extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleClick() {\n        this.props.handleClick(this.props.title)\n    }\n\n    render() {\n        // If this button is active we will set its' class appropriately\n        let className = this.props.isActive ? \"activeButton\" : \"\";\n\n        return (\n            <button className={className} onClick={this.handleClick}>{this.props.title}</button>\n        )\n    }\n}","import React from 'react';\n\nimport { ElevatorButton } from '../components/ElevatorButton';\n\nexport class ElevatorCallButton extends React.Component {\n    render() {\n        return (\n            <div className=\"buttonPannel callButton\">\n                <ElevatorButton\n                    title=\"o\"\n                    handleClick={this.props.handleClick}\n                    isActive={this.props.isActive}\n                />\n            </div>\n        );\n    }\n}","import React from 'react';\n\n/*\n    The CounterWeight is an object that can be used to balance a flex container [{leftItem} {centerItem} {counterWeight}]\n*/\nexport class CounterWeight extends React.Component {\n    render() {\n        return <div className={this.props.className} />;\n    }\n}","import React from 'react';\n\nexport class FloorNumber extends React.Component {\n    render() {\n        // If this floor is active we the number should be red\n        const className = \"floorNumber \" + (this.props.isActive ? \"redFloorNumber\" : \"\");\n\n        return (\n            <div className={className} > {this.props.floor}</div>\n        );\n    }\n}","import React from 'react';\n\nimport { FloorNumber } from '../components/FloorNumber';\n\nexport class ElevatorBayHeader extends React.Component {\n    render() {\n        return (\n            <div className=\"buttonPannel\">\n                <div className=\"elevatorBayHeader\">\n                    {this.props.floors.map(floor => (\n                        <FloorNumber key={floor} isActive={floor === this.props.currentFloor} floor={floor} />\n                    ))\n                    }\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\n\nimport { ElevatorBayHeader } from './ElevatorBayHeader';\n\nexport class ElevatorBay extends React.Component {\n    render() {\n        return (\n            <div>\n                <ElevatorBayHeader currentFloor={this.props.currentFloor} floors={this.props.floors} />\n                {this.props.elevator}\n            </div>\n        );\n    }\n}","import React from 'react';\n\nimport { ElevatorCallButton } from '../containers/ElevatorCallButton';\nimport { CounterWeight } from '../components/CounterWeight';\nimport { ElevatorBay } from './ElevatorBay';\n\nexport class Floor extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    /*\n        Function that will be passed into the ElevatorButton object\n    */\n    handleClick() {\n        // Call the ElevatorShaft handleClick function with the current floor to add it to its' requestQueue\n        this.props.handleClick(this.props.floor);\n    }\n\n    render() {\n        return (\n            <div className=\"floor\" style={this.props.style} id={\"floor_\" + this.props.floor}>\n                <ElevatorCallButton handleClick={this.handleClick} isActive={this.props.requestQueue.includes(this.props.floor)} />\n                <ElevatorBay elevator={this.props.elevator} currentFloor={this.props.currentFloor} floors={this.props.floors} />\n                <CounterWeight className=\"buttonPannel callButton\" />\n            </div>\n        );\n    }\n}","import React from 'react';\n\nimport { ElevatorButton } from '../components/ElevatorButton';\n\nexport class Elevator extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    /*\n        Function that calls the passed-in handleClick function to add the floor number to the queue\n        Also scrolls the user to the floor where the elevator will be arriving\n    */\n    handleClick(floor) {\n        this.props.onClick(floor);\n        document.getElementById(\"floor_\" + floor).scrollIntoView({ behavior: \"smooth\" });\n    }\n\n    render() {\n        return (\n            <div className=\"elevator\">\n                <div className=\"buttonPannel\">\n                    {this.props.floors.map(button => (\n                        <ElevatorButton\n                            key={button}\n                            title={button}\n                            handleClick={this.handleClick}\n                            isActive={this.props.requestQueue.includes(button)}\n                        />\n                    ))}\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\n\nimport { Floor } from './Floor';\nimport { Elevator } from './Elevator';\nimport ElevatorScene1 from '../images/ElevatorScene1.png';\nimport ElevatorScene2 from '../images/ElevatorScene2.png';\nimport ElevatorScene3 from '../images/ElevatorScene3.png';\nimport ElevatorScene4 from '../images/ElevatorScene4.png';\n\nexport class ElevatorShaft extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // We hold quite a bit on the state of the ElevatorShaft\n        this.state = {\n            currentFloor: 1,        // Current floor that the elevator is on\n            requestQueue: [],       // Array that holds all of our queued floors\n            floors: [4, 3, 2, 1],   // Array of the floors we have in the elevator shaft\n            direction: 0,           // Direction of the elevator (defaulted to 0 which means we're not going anywhere)\n            legend: {               // This legend is an object that describes the styling for each floor\n                1: { backgroundImage: \"url(\" + ElevatorScene1 + \")\", backgroundColor: \"#5402a796\" },\n                2: { backgroundImage: \"url(\" + ElevatorScene2 + \")\", backgroundColor: \"#21a7d2\" },\n                3: { backgroundImage: \"url(\" + ElevatorScene3 + \")\", backgroundColor: \"#006600\" },\n                4: { backgroundImage: \"url(\" + ElevatorScene4 + \")\", backgroundColor: \"#ff9933\" }\n            }\n        }\n\n        this.insertNewRequest = this.insertNewRequest.bind(this);\n        this.moveFloors = this.moveFloors.bind(this);\n        this.startClock = this.startClock.bind(this);\n    }\n\n    /*\n        Function that will take a floor number and add it to the requestQueue held on the state of the ElevatorShaft\n    */\n    insertNewRequest(floor) {\n        // No use in adding duplicates or the floor we're currently on\n        if (!this.state.requestQueue.includes(floor) && this.state.currentFloor !== floor) {\n            let newQueue = this.state.requestQueue;\n            let direction = this.state.direction;\n\n            if (direction === 0) {\n                // If we're not moving we need to set the new direction\n                newQueue.push(floor);\n                direction = floor > this.state.currentFloor ? 1 : -1\n            } else {\n                // Otherwise we need to preserve the direction and put the new floor in the right spot in the queue\n                if (this.state.direction * (floor - this.state.currentFloor) > 0) {\n                    newQueue.unshift(floor);\n                } else {\n                    newQueue.push(floor)\n                }\n            }\n\n            // Update the state with the new requestQueue and (potentially) updated direction\n            this.setState({\n                requestQueue: newQueue,\n                direction: direction\n            });\n        }\n    }\n\n    /*\n        Function that will move the elevator a floor in the direction that is held on the state of the ElevatorShaft\n    */\n    moveFloors() {\n        // We move floors by adding the direction to the floor we're on right now\n        let newFloor = this.state.currentFloor + this.state.direction;\n\n        // Filter the queue to remove the current floor \n        let newQueue = this.state.requestQueue.filter(function (floor) {\n            return floor !== newFloor;\n        });\n\n        // First assume we won't move anywhere\n        let direction = 0;\n\n        // If we still have items in the queue we will keep moving so we calculate the direction\n        if (newQueue.length) {\n            direction = newQueue[0] > newFloor ? 1 : -1;\n        }\n\n        // Update the state with the new floor, queue and updated direction\n        this.setState({\n            currentFloor: newFloor,\n            requestQueue: newQueue,\n            direction: direction\n        });\n    }\n\n    /*\n        Function that starts a 1 second interval that checks if we want to move floors\n    */\n    startClock() {\n        setInterval(function (self) {\n            // The direction is either -1, 0 or 1\n            if (self.state.direction) {\n                // If the direction is anything but 0 we have somewhere to go so we move!\n                self.moveFloors();\n            }\n        }, 1000, this);\n    }\n\n    componentDidMount() {\n        this.startClock();\n    }\n\n    render() {\n        // Elevator object that will only be added to the floor that the elevator is at\n        let elevator = <Elevator\n            onClick={this.insertNewRequest}\n            floor={this.state.currentFloor}\n            requestQueue={this.state.requestQueue}\n            floors={this.state.floors}\n        />;\n\n        // Elevator doors that are a placeholder (of equal size) to the real elevator\n        let elevatorDoors = <div className=\"elevatorDoors\" />;\n\n        /*\n            We will render each floor in the elevator shaft\n            If the floor we're rendering is the current floor we give it the elevator object\n            We use the legend to determine the style of the floor as well\n        */\n        return (\n            <div className=\"elevatorShaft\">\n                {this.state.floors.map(floor => (\n                    <Floor\n                        key={floor}\n                        floor={floor}\n                        currentFloor={this.state.currentFloor}\n                        elevator={(floor === this.state.currentFloor) ? elevator : elevatorDoors}\n                        handleClick={this.insertNewRequest}\n                        requestQueue={this.state.requestQueue}\n                        style={this.state.legend[floor]}\n                        floors={this.state.floors}\n                    />\n                ))}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './App.css';\n\nimport { ElevatorShaft } from './containers/ElevatorShaft';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ElevatorShaft />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}